/*
 * clase PanelMultiplicarMatrices la cual sera la vista principal de esta seccion en la cual
 * podran realizar operaciones tales como: multiplicar un Matriz A por una Matriz B
 */
package Vista;


import javax.swing.JTextField;
import javax.swing.JPanel;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Objects;
import java.awt.Color;
import javax.swing.border.EmptyBorder;

import controlador.Utilidades;
import interfaces.UnidadMedida;

import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.JComboBox;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import java.awt.event.ItemListener;
import java.awt.event.ItemEvent;
import javax.swing.JEditorPane;

/**
 *
 * @author SOFTWARE GALAXIA
 */
public class PanelLongitud extends javax.swing.JPanel {
 
    //Creamos el objeto de nuestra clase controlador
   
    
    private static final long serialVersionUID = 1L;

	/*Creamos tres arreglos bidimensionales de tipo JTextField los cuales haran referencia
    a las matrices que trabajaremos */    
    
    private JPanel contentPanel;
    private JLabel lblConvertirUnidadDe;
    private JLabel lblUnidad;
    private JLabel lblUnidad_1;
    private JComboBox<UnidadMedida> cmbUnidad1;
    private JComboBox<String> cmbUnidad2;
    private JLabel lblCantidad;
    private JTextField txtCantidad;
    private JLabel lblResultado;
    private JButton btnLimpiar;
    private JButton btnConvertir;
    private JLabel lblImagen;
    private JLabel lblflecha;
    String unidad1, unidad2;
	double cantidadEscrita;
	DecimalFormat formatea;
	private JPanel panel;
	JEditorPane editorPaneResultado;
    
    
    public PanelLongitud() {
        
        initComponents();
        cargarComboBox();
        
        cmbUnidad1.addActionListener(e -> {
            setComboBox();
            txtCantidad.setText("");
            
        });
      
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    private void initComponents() {

        setBackground(new java.awt.Color(255, 255, 255));
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.rowWeights = new double[]{1.0};
        gridBagLayout.columnWeights = new double[]{1.0};
        setLayout(gridBagLayout);
        
        contentPanel = new JPanel();
        contentPanel.setLayout(null);
        contentPanel.setForeground(Color.WHITE);
        contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
        contentPanel.setBackground(Color.WHITE);
        GridBagConstraints gbc_contentPanel = new GridBagConstraints();
        gbc_contentPanel.fill = GridBagConstraints.BOTH;
        gbc_contentPanel.gridx = 0;
        gbc_contentPanel.gridy = 0;
        add(contentPanel, gbc_contentPanel);
        
        lblConvertirUnidadDe = new JLabel("CONVERSOR DE  UNIDAD DE MEDIDA");
        lblConvertirUnidadDe.setForeground(Color.BLACK);
        lblConvertirUnidadDe.setFont(new Font("Roboto Black", Font.BOLD, 14));
        lblConvertirUnidadDe.setBounds(283, 11, 267, 27);
        contentPanel.add(lblConvertirUnidadDe);
        
        btnLimpiar = new JButton("Limpiar");
        btnLimpiar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/clean2.png")));
		btnLimpiar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				txtCantidad.setText("");
				editorPaneResultado.setText("");
				txtCantidad.requestFocus();
			}
		});
        btnLimpiar.setFont(new Font("Roboto Black", Font.BOLD | Font.ITALIC, 11));
        btnLimpiar.setBorder(null);
        btnLimpiar.setBackground(Color.WHITE);
        btnLimpiar.setBounds(291, 365, 119, 57);
        contentPanel.add(btnLimpiar);
        
        lblImagen = new JLabel("");
        ImageIcon icoMon = new ImageIcon(getClass().getResource("/Imagenes/conversor-longitud.jpg"));
		ImageIcon imgMon = new ImageIcon(icoMon.getImage().getScaledInstance(255, 255, Image.SCALE_SMOOTH));
		lblImagen.setIcon(imgMon);
        lblImagen.setBorder(null);
        lblImagen.setBounds(10, 59, 256, 255);
        contentPanel.add(lblImagen);
        ImageIcon ico = new ImageIcon(getClass().getResource("/Imagenes/FLECHA.png"));
		ImageIcon img = new ImageIcon(ico.getImage().getScaledInstance(62, 40, Image.SCALE_SMOOTH));
        
        panel = new JPanel();
        panel.setBounds(283, 49, 267, 260);
        contentPanel.add(panel);
        panel.setLayout(null);
        
        lblUnidad = new JLabel("DE");
        lblUnidad.setBounds(25, 0, 45, 28);
        panel.add(lblUnidad);
        lblUnidad.setFont(new Font("Roboto", Font.BOLD, 14));
        
        cmbUnidad2 = new JComboBox<String>();
        cmbUnidad2.setBounds(172, 29, 92, 40);
        panel.add(cmbUnidad2);
        cmbUnidad2.setEnabled(false);
        cmbUnidad2.setFont(new Font("Roboto Light", Font.PLAIN, 11));
        cmbUnidad2.setModel(new DefaultComboBoxModel<String>(new String[] {"Kilometro", "Metro", "Millas", "Yarda", "Pie", "Pulgada", "Millas Nauticas"}));
        cmbUnidad2.setEditable(true);
        cmbUnidad2.setBorder(null);
        cmbUnidad2.setBackground(new Color(220, 20, 60));
        
        lblUnidad_1 = new JLabel("A");
        lblUnidad_1.setBounds(212, 0, 45, 28);
        panel.add(lblUnidad_1);
        lblUnidad_1.setFont(new Font("Roboto", Font.BOLD, 14));
        
        cmbUnidad1 = new JComboBox<UnidadMedida>();
        cmbUnidad1.setBounds(10, 29, 92, 40);
        panel.add(cmbUnidad1);
        cmbUnidad1.addItemListener(new ItemListener() {
        	public void itemStateChanged(ItemEvent e) {
        		cmbUnidad2.setEnabled(true);
        		String aUnidad = cmbUnidad1.getSelectedItem().toString();
        		switch (aUnidad) {
				case "Kilometro":
					cmbUnidad2.setModel(new DefaultComboBoxModel<String>(new String[] {"Metro", "Millas", "Yarda", "Pie", "Pulgada", "Millas Nauticas"}));
					break;
				case "Metro":
					cmbUnidad2.setModel(new DefaultComboBoxModel<String>(new String[] {"Kilometro", "Millas", "Yarda", "Pie", "Pulgada", "Millas Nauticas"}));
					break;
				case "Millas":
					cmbUnidad2.setModel(new DefaultComboBoxModel<String>(new String[] {"Kilometro", "Metro", "Yarda", "Pie", "Pulgada", "Millas Nauticas"}));
					break;
				case "Yarda":
					cmbUnidad2.setModel(new DefaultComboBoxModel<String>(new String[] {"Kilometro", "Metro", "Millas", "Pie", "Pulgada", "Millas Nauticas"}));
					break;
				case "Pie":
					cmbUnidad2.setModel(new DefaultComboBoxModel<String>(new String[] {"Kilometro", "Metro", "Millas", "Yarda", "Pulgada", "Millas Nauticas"}));
					break;
				case "Pulgada":
					cmbUnidad2.setModel(new DefaultComboBoxModel<String>(new String[] {"Kilometro", "Metro", "Millas", "Yarda", "Pie", "Millas Nauticas"}));
					break;
				case "Millas Nauticas":
					cmbUnidad2.setModel(new DefaultComboBoxModel<String>(new String[] {"Kilometro", "Metro", "Millas", "Yarda", "Pie", "Pulgada"}));
					break;
				default:
					break;
				}
        	}
        });
        // cmbUnidad1.setModel(new DefaultComboBoxModel(new String[] {"Kilometro", "Metro", "Milla", "Yarda", "Pie", "Pulgada", "MillaNautica"}));
         cmbUnidad1.setFont(new Font("Roboto Light", Font.PLAIN, 11));
         cmbUnidad1.setEditable(true);
         cmbUnidad1.setBorder(null);
         cmbUnidad1.setBackground(Color.WHITE);
         
         btnConvertir = new JButton("CONVERTIR");
         btnConvertir.setBounds(149, 97, 100, 40);
         panel.add(btnConvertir);
         btnConvertir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (txtCantidad.getText().length() !=0) {
					double cantidad = Double.parseDouble(txtCantidad.getText());
						if(cantidad > 0) {
							unidad1 = cmbUnidad1.getSelectedItem().toString();
							unidad2 = cmbUnidad2.getSelectedItem().toString();
							calcularLongitud();
						}else {
							JOptionPane.showMessageDialog(null, "No se puede calcular con un monto negativo");
							limpiar();
						}
						
				}else {
					JOptionPane.showMessageDialog(null, "No se puede calcular porque el monto esta vacio");
					limpiar();
				}
			}

			
		});
         btnConvertir.setForeground(new Color(245, 245, 220));
         btnConvertir.setFont(new Font("Roboto Black", Font.BOLD | Font.ITALIC, 11));
         btnConvertir.setBorder(null);
         btnConvertir.setBackground(new Color(220, 20, 60));
         
         txtCantidad = new JTextField();
         txtCantidad.setBounds(10, 97, 119, 40);
         panel.add(txtCantidad);
         txtCantidad.addKeyListener(new KeyAdapter() {
			public void keyTyped(KeyEvent e) {
				char c = e.getKeyChar();
				if(!Character.isDigit(c) && c !='.') {
					e.consume();
					
					
					
				}
				if (c=='.' && txtCantidad.getText().contains(".")) {
					e.consume();
					JOptionPane.showMessageDialog(null, "No se puede agregar dos puntos decimales a un numero");
					
				}
			
			}
		});
         txtCantidad.setColumns(10);
         
         lblCantidad = new JLabel("CANTIDAD");
         lblCantidad.setBounds(20, 72, 119, 28);
         panel.add(lblCantidad);
         lblCantidad.setFont(new Font("Roboto", Font.BOLD, 14));
         
         lblflecha = new JLabel("");
         lblflecha.setBounds(108, 29, 62, 40);
         panel.add(lblflecha);
         lblflecha.setIcon(img);
         lblflecha.setFont(new Font("Roboto", Font.BOLD, 14));
         
         lblResultado = new JLabel("Resultado");
         lblResultado.setBounds(10, 148, 75, 28);
         panel.add(lblResultado);
         lblResultado.setFont(new Font("Roboto", Font.BOLD, 14));
         
         editorPaneResultado = new JEditorPane();
         editorPaneResultado.setFont(new Font("Roboto Black", Font.BOLD, 18));
         editorPaneResultado.setEditable(false);
         editorPaneResultado.setForeground(new Color(250, 128, 114));
         editorPaneResultado.setBackground(new Color(220, 20, 60));
         editorPaneResultado.setBounds(10, 172, 254, 77);
         panel.add(editorPaneResultado);
    }
    private void calcularLongitud() {
    	
    	String cantidad = txtCantidad.getText().replace(",", ".");
    	    String toUnidad = cmbUnidad2.getSelectedItem().toString();
    	    if(validarCampos(cantidad)) {
    	        
    	    	UnidadMedida unidadMedidaElegida =  (UnidadMedida) cmbUnidad1.getSelectedItem();
    	        Objects.requireNonNull(unidadMedidaElegida).setLongitud(Double.parseDouble(cantidad));
    	        double valor = unidadMedidaElegida.conversorMutifuncional(toUnidad);
    	        
    	        DecimalFormat formatea = new DecimalFormat("###,###.##");
    	        StringBuilder sb = new StringBuilder();
    	        sb.append(formatea.format(Double.parseDouble(cantidad)) + " " + unidadMedidaElegida.getNombre());
    	        sb.append(" es igual a: \n");
    	        sb.append("<font color='#0000FF'>");
    	        sb.append(String.valueOf(formatea.format(valor)));
    	        sb.append("</font>");
    	        sb.append(" " + toUnidad);
    	        editorPaneResultado.setContentType("text/html");
    	        editorPaneResultado.setText(sb.toString());
    	    }
    	
    	/**
		String cantidad = txtCantidad.getText().replace(",", ".");
		String toUnidad = cmbUnidad2.getSelectedItem().toString();
		if(validarCampos(cantidad)) {
			UnidadMedida unidadMedidaElegida =  (UnidadMedida) cmbUnidad1.getSelectedItem();
			Objects.requireNonNull(unidadMedidaElegida).setLongitud(Double.parseDouble(cantidad));
			double valor = 0.0;
			
			if(unidadMedidaElegida instanceof Metro) {
				valor = ((Metro) unidadMedidaElegida).conversorMutifuncional(toUnidad);
			}else if (unidadMedidaElegida instanceof Kilometro) {
				valor = ((Kilometro) unidadMedidaElegida).conversorMutifuncional(toUnidad);
				
			}else if(unidadMedidaElegida instanceof Millas) {
				valor = ((Millas) unidadMedidaElegida).conversorMutifuncional(toUnidad);
			}else if (unidadMedidaElegida instanceof Yarda) {
				valor = ((Yarda) unidadMedidaElegida).conversorMutifuncional(toUnidad);
				
			}else if(unidadMedidaElegida instanceof Pie) {
				valor = ((Pie) unidadMedidaElegida).conversorMutifuncional(toUnidad);
			}else if(unidadMedidaElegida instanceof Pulgada) {
				valor = ((Pulgada) unidadMedidaElegida).conversorMutifuncional(toUnidad);	
			}else if (unidadMedidaElegida instanceof MillasNauticas) {
				valor = ((MillasNauticas) unidadMedidaElegida).conversorMutifuncional(toUnidad);
			}
			
			DecimalFormat formatea = new DecimalFormat("###,###.##");
			StringBuilder sb = new StringBuilder();
			sb.append(formatea.format(Double.parseDouble(cantidad)) + " " + unidadMedidaElegida.getNombre());
			sb.append(" es igual a: \n");
			sb.append("<font color='#0000FF'>");
			sb.append(String.valueOf(formatea.format(valor)));
			sb.append("</font>");
			sb.append(" " + toUnidad);
			editorPaneResultado.setContentType("text/html");
			editorPaneResultado.setText(sb.toString());
           
		}**/
    }
    
    
    private boolean validateText(String text){
        try{
            Double.parseDouble(text);
            return true;
        }catch (NumberFormatException | NullPointerException e){
            e.printStackTrace();
            return false;
        }
    }
 public boolean validarCampos(String text){
        if (!validateText(text)){
            return false;
        } else if (!validateComboBox()) {
            return false;
        }
        return true;
    }
 private boolean validateComboBox(){
       UnidadMedida longitud = (UnidadMedida) cmbUnidad1.getSelectedItem();
       return (longitud != null);
    }
	private void limpiar() {
		txtCantidad.setText("");
		editorPaneResultado.setText("");
		txtCantidad.requestFocus();
		
	}
	private void setComboBox(){
        UnidadMedida unidad1 = (UnidadMedida) cmbUnidad1.getSelectedItem();
        if(unidad1 != null) {
            ArrayList<UnidadMedida> unidadDeMedida = new ArrayList<>();
            for (int i = 0; i < cmbUnidad1.getItemCount(); i++) {
                if (!cmbUnidad1.getItemAt(i).equals(unidad1)) {
                    unidadDeMedida.add(cmbUnidad1.getItemAt(i));
                }
            }
        }
    }
	public void cargarComboBox() {
		Utilidades.UNIDADES.forEach(cmbUnidad1::addItem);
		cmbUnidad1.getSelectedIndex();
	}
}
