/*

 */
package Programa;

import java.awt.FlowLayout;
import javax.swing.JPanel;
import javax.swing.JTextField;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.awt.Color;
import javax.swing.border.EmptyBorder;

import Clases.ConvertirDivisas;
import Clases.MonedasGuardadas;
import Scrap.CapturarCotizacionMonedas;
import Clases.Fecha;

import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Font;
import javax.swing.SwingConstants;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComboBox;

/**
 *
 * @author SOFTWARE GALAXIA
 */
public class PanelMoneda extends javax.swing.JPanel {

    /*Creamos tres arreglos bidimensionales de tipo JTextField los cuales haran referencia
    a las matrices que trabajaremos */    
    private JPanel contentPane;
    private JLabel lblSeleccioneLasMonedas;
    private JLabel lbldollar;
    private JTextField txtDollarCompra;
    private JTextField txtdollarVenta;
    private JLabel lbleuro;
    private JLabel lbllibra;
    private JLabel lblyen;
    private JLabel lblreal;
    private JTextField txteuroCompra;
    private JTextField txteuroVenta;
    private JTextField txtlibraCompra;
    private JTextField txtlibraVenta;
    private JTextField txtyenCompra;
    private JTextField txtYenVenta;
    private JTextField txtrealCompra;
    private JTextField txtrealVenta;
    private JTextField fechaActualText;
    private JLabel lblNewLabel;
    private JLabel lblCompra;
    private JLabel lblVenta;
    private JButton btnLimpiar;
    private JButton btnGuardarDatos;
    private JPanel panel;
    private JTextField txtResultado;
    private JButton btnConvertir;
    private JTextField txtMonto;
    private JLabel lblResultado;
    private JLabel lbltengo;
    private JLabel lblQuiero;
    private JLabel lblflecha;
    private JComboBox deDivisaComboBox;
    private JLabel lblCalculaadora;
    private JComboBox aDivisaComboBox;
    private JLabel lblMontoAConvertir;
    private JLabel lblNewLabel_1;
    List<String> lista;
	private CapturarCotizacionMonedas dolar, euro, libra, yen, realB;
	private ConvertirDivisas doCompra, doVenta, euCompra, euVenta, 
	liCompra,liVenta, yeCompra, yeVenta,reCompra, reVenta;
	private MonedasGuardadas monedasGuardadas;
    
    public PanelMoneda() {
        
        initComponents();
        cargarCampoCotizacionesconJsoup();
        
        /*Asignamos dimensiones a los arreglos */
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        setBackground(new java.awt.Color(255, 255, 255));
        GridBagLayout gridBagLayout = new GridBagLayout();
        gridBagLayout.rowWeights = new double[]{1.0};
        gridBagLayout.columnWeights = new double[]{1.0};
        setLayout(gridBagLayout);
        
        contentPane = new JPanel();
        contentPane.setLayout(null);
        contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
        contentPane.setBackground(Color.WHITE);
        GridBagConstraints gbc_contentPane = new GridBagConstraints();
        gbc_contentPane.fill = GridBagConstraints.BOTH;
        gbc_contentPane.gridx = 0;
        gbc_contentPane.gridy = 0;
        add(contentPane, gbc_contentPane);
        
        lblSeleccioneLasMonedas = new JLabel("COTIZACIONES\r\n");
        lblSeleccioneLasMonedas.setForeground(Color.BLACK);
        lblSeleccioneLasMonedas.setFont(new Font("Roboto Black", Font.BOLD, 17));
        lblSeleccioneLasMonedas.setBounds(10, 11, 136, 27);
        contentPane.add(lblSeleccioneLasMonedas);
        
        lbldollar = new JLabel("");
        lbldollar.setFont(new Font("Roboto Light", Font.BOLD, 11));
        lbldollar.setBounds(10, 65, 59, 40);
        ImageIcon icoDol = new ImageIcon(getClass().getResource("/Imagenes/dollar.png"));
		ImageIcon imgDol = new ImageIcon(
				icoDol.getImage().getScaledInstance(lbldollar.getWidth(), lbldollar.getHeight(), Image.SCALE_SMOOTH));
		lbldollar.setIcon(imgDol);
        contentPane.add(lbldollar);
        
        txtDollarCompra = new JTextField();
        txtDollarCompra.setHorizontalAlignment(SwingConstants.CENTER);
        txtDollarCompra.setForeground(Color.BLACK);
        txtDollarCompra.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txtDollarCompra.setEditable(false);
        txtDollarCompra.setColumns(10);
        txtDollarCompra.setBorder(null);
        txtDollarCompra.setBackground(Color.WHITE);
        txtDollarCompra.setBounds(79, 65, 46, 40);
        contentPane.add(txtDollarCompra);
        
        txtdollarVenta = new JTextField();
        txtdollarVenta.setHorizontalAlignment(SwingConstants.CENTER);
        txtdollarVenta.setForeground(Color.BLACK);
        txtdollarVenta.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txtdollarVenta.setEditable(false);
        txtdollarVenta.setColumns(10);
        txtdollarVenta.setBorder(null);
        txtdollarVenta.setBackground(Color.WHITE);
        txtdollarVenta.setBounds(135, 65, 46, 40);
        contentPane.add(txtdollarVenta);
        
        lbleuro = new JLabel("");
        lbleuro.setFont(new Font("Roboto Light", Font.BOLD, 11));
        lbleuro.setBounds(10, 116, 59, 44);
        ImageIcon icoeu = new ImageIcon(getClass().getResource("/Imagenes/EUR.png"));
		ImageIcon imgEU = new ImageIcon(
				icoeu.getImage().getScaledInstance(lbleuro.getWidth(), lbleuro.getHeight(), Image.SCALE_SMOOTH));
		lbleuro.setIcon(imgEU);
        contentPane.add(lbleuro);
        
        lbllibra = new JLabel("");
        lbllibra.setFont(new Font("Roboto Light", Font.BOLD, 11));
        lbllibra.setBounds(10, 171, 59, 44);
        ImageIcon icolib = new ImageIcon(getClass().getResource("/Imagenes/GBP.png"));
		ImageIcon imglib = new ImageIcon(
				icolib.getImage().getScaledInstance(lbllibra.getWidth(), lbllibra.getHeight(), Image.SCALE_SMOOTH));
		lbllibra.setIcon(imglib);
        contentPane.add(lbllibra);
        
        lblyen = new JLabel("");
        lblyen.setFont(new Font("Roboto Light", Font.BOLD, 11));
        lblyen.setBounds(10, 226, 59, 44);
        ImageIcon icoyen = new ImageIcon(getClass().getResource("/Imagenes/JPY.png"));
		ImageIcon imgyen = new ImageIcon(
				icoyen.getImage().getScaledInstance(lblyen.getWidth(), lblyen.getHeight(), Image.SCALE_SMOOTH));
		lblyen.setIcon(imgyen);
        contentPane.add(lblyen);
        
        lblreal = new JLabel("");
        lblreal.setFont(new Font("Roboto Light", Font.BOLD, 11));
        lblreal.setBounds(10, 289, 59, 44);
        ImageIcon icowon = new ImageIcon(getClass().getResource("/Imagenes/BRL.png"));
		ImageIcon imgwon = new ImageIcon(
				icowon.getImage().getScaledInstance(lblreal.getWidth(), lblreal.getHeight(), Image.SCALE_SMOOTH));
		lblreal.setIcon(imgwon);
        contentPane.add(lblreal);
        
        txteuroCompra = new JTextField();
        txteuroCompra.setHorizontalAlignment(SwingConstants.CENTER);
        txteuroCompra.setForeground(Color.BLACK);
        txteuroCompra.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txteuroCompra.setEditable(false);
        txteuroCompra.setColumns(10);
        txteuroCompra.setBorder(null);
        txteuroCompra.setBackground(Color.WHITE);
        txteuroCompra.setBounds(79, 116, 46, 44);
        contentPane.add(txteuroCompra);
        
        txteuroVenta = new JTextField();
        txteuroVenta.setHorizontalAlignment(SwingConstants.CENTER);
        txteuroVenta.setForeground(Color.BLACK);
        txteuroVenta.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txteuroVenta.setEditable(false);
        txteuroVenta.setColumns(10);
        txteuroVenta.setBorder(null);
        txteuroVenta.setBackground(Color.WHITE);
        txteuroVenta.setBounds(135, 116, 46, 44);
        contentPane.add(txteuroVenta);
        
        txtlibraCompra = new JTextField();
        txtlibraCompra.setHorizontalAlignment(SwingConstants.CENTER);
        txtlibraCompra.setForeground(Color.BLACK);
        txtlibraCompra.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txtlibraCompra.setEditable(false);
        txtlibraCompra.setColumns(10);
        txtlibraCompra.setBorder(null);
        txtlibraCompra.setBackground(Color.WHITE);
        txtlibraCompra.setBounds(79, 171, 46, 44);
        contentPane.add(txtlibraCompra);
        
        txtlibraVenta = new JTextField();
        txtlibraVenta.setHorizontalAlignment(SwingConstants.CENTER);
        txtlibraVenta.setForeground(Color.BLACK);
        txtlibraVenta.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txtlibraVenta.setEditable(false);
        txtlibraVenta.setColumns(10);
        txtlibraVenta.setBorder(null);
        txtlibraVenta.setBackground(Color.WHITE);
        txtlibraVenta.setBounds(135, 171, 46, 44);
        contentPane.add(txtlibraVenta);
        
        txtyenCompra = new JTextField();
        txtyenCompra.setHorizontalAlignment(SwingConstants.CENTER);
        txtyenCompra.setForeground(Color.BLACK);
        txtyenCompra.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txtyenCompra.setEditable(false);
        txtyenCompra.setColumns(10);
        txtyenCompra.setBorder(null);
        txtyenCompra.setBackground(Color.WHITE);
        txtyenCompra.setBounds(79, 227, 46, 43);
        contentPane.add(txtyenCompra);
        
        txtYenVenta = new JTextField();
        txtYenVenta.setHorizontalAlignment(SwingConstants.CENTER);
        txtYenVenta.setForeground(Color.BLACK);
        txtYenVenta.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txtYenVenta.setEditable(false);
        txtYenVenta.setColumns(10);
        txtYenVenta.setBorder(null);
        txtYenVenta.setBackground(Color.WHITE);
        txtYenVenta.setBounds(135, 226, 46, 44);
        contentPane.add(txtYenVenta);
        
        txtrealCompra = new JTextField();
        txtrealCompra.setHorizontalAlignment(SwingConstants.CENTER);
        txtrealCompra.setForeground(Color.BLACK);
        txtrealCompra.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txtrealCompra.setEditable(false);
        txtrealCompra.setColumns(10);
        txtrealCompra.setBorder(null);
        txtrealCompra.setBackground(Color.WHITE);
        txtrealCompra.setBounds(79, 292, 46, 41);
        contentPane.add(txtrealCompra);
        
        txtrealVenta = new JTextField();
        txtrealVenta.setHorizontalAlignment(SwingConstants.CENTER);
        txtrealVenta.setForeground(Color.BLACK);
        txtrealVenta.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        txtrealVenta.setEditable(false);
        txtrealVenta.setColumns(10);
        txtrealVenta.setBorder(null);
        txtrealVenta.setBackground(Color.WHITE);
        txtrealVenta.setBounds(135, 289, 46, 44);
        contentPane.add(txtrealVenta);
        
        fechaActualText = new JTextField();
        fechaActualText.setHorizontalAlignment(SwingConstants.CENTER);
        fechaActualText.setForeground(Color.BLACK);
        fechaActualText.setFont(new Font("Roboto Light", Font.ITALIC, 10));
        fechaActualText.setEditable(false);
        fechaActualText.setColumns(10);
        fechaActualText.setBorder(null);
        fechaActualText.setBackground(Color.WHITE);
        fechaActualText.setBounds(33, 350, 184, 27);
        contentPane.add(fechaActualText);
        
        lblNewLabel = new JLabel("MONEDA");
        lblNewLabel.setFont(new Font("Roboto", Font.PLAIN, 11));
        lblNewLabel.setBounds(10, 40, 59, 14);
        contentPane.add(lblNewLabel);
        
        lblCompra = new JLabel("COMPRA");
        lblCompra.setFont(new Font("Roboto", Font.PLAIN, 11));
        lblCompra.setBounds(79, 40, 59, 14);
        contentPane.add(lblCompra);
        
        lblVenta = new JLabel("VENTA");
        lblVenta.setFont(new Font("Roboto", Font.PLAIN, 11));
        lblVenta.setBounds(148, 40, 59, 14);
        contentPane.add(lblVenta);
        
        btnLimpiar = new JButton("Limpiar");
        btnLimpiar.setFont(new Font("Roboto Black", Font.BOLD | Font.ITALIC, 11));
        btnLimpiar.setBorder(null);
        btnLimpiar.setBackground(Color.WHITE);
        btnLimpiar.setBounds(464, 376, 119, 57);
        btnLimpiar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				limpiar();
				txtMonto.requestFocus();
			
			}
		});
		btnLimpiar.setIcon(new ImageIcon(getClass().getResource("/Imagenes/clean2.png")));
        contentPane.add(btnLimpiar);
        
        btnGuardarDatos = new JButton("Actualizar datos guardados");
        btnGuardarDatos.setFont(new Font("Roboto Black", Font.BOLD | Font.ITALIC, 11));
        btnGuardarDatos.setBorder(null);
        btnGuardarDatos.setBackground(Color.WHITE);
        btnGuardarDatos.setBounds(10, 376, 207, 57);
        btnGuardarDatos.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {guardarDatosArchivoCotizacion();
			}
		});
		btnGuardarDatos.setIcon(new ImageIcon(getClass().getResource("/Imagenes/Save.png")));
        contentPane.add(btnGuardarDatos);
        ImageIcon icofle = new ImageIcon(getClass().getResource("/Imagenes/invertir.png"));
        
        panel = new JPanel();
        panel.setLayout(null);
        panel.setBackground(new Color(204, 255, 204));
        panel.setBounds(359, 60, 353, 306);
        contentPane.add(panel);
        
        txtResultado = new JTextField();
        txtResultado.setHorizontalAlignment(SwingConstants.CENTER);
        txtResultado.setForeground(new Color(255, 69, 0));
        txtResultado.setFont(new Font("Times New Roman", Font.BOLD, 16));
        txtResultado.setColumns(10);
        txtResultado.setBorder(null);
        txtResultado.setBackground(new Color(51, 204, 255));
        txtResultado.setBounds(0, 262, 353, 44);
        panel.add(txtResultado);
        
        btnConvertir = new JButton("CONVERTIR");
        btnConvertir.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if (txtMonto.getText().length() != 0) {
					double monto = Double.parseDouble(txtMonto.getText());
					if (monto > 0) {
						convertirDivisas();
					} else {
						JOptionPane.showMessageDialog(null, "Ingrese valores mayores a 0");
						limpiar();
					}

				} else {
					JOptionPane.showMessageDialog(null, "No se puede calcular porque el monto esta vacio");
					limpiar();
				}
				
			}
		});
        btnConvertir.setFont(new Font("Roboto Black", Font.BOLD | Font.ITALIC, 11));
        btnConvertir.setBorder(null);
        btnConvertir.setBackground(new Color(204, 255, 255));
        btnConvertir.setBounds(234, 168, 119, 40);
        panel.add(btnConvertir);
        
        txtMonto = new JTextField();
        txtMonto.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				btnConvertir.requestFocus();
				btnConvertir.doClick();
			}
		});
        txtMonto.setColumns(10);
        txtMonto.setBounds(0, 168, 234, 40);
        panel.add(txtMonto);
        
        lblResultado = new JLabel("RESULTADO\r\n");
        lblResultado.setFont(new Font("Roboto", Font.BOLD, 14));
        lblResultado.setBounds(0, 239, 353, 28);
        panel.add(lblResultado);
        
        lbltengo = new JLabel("De");
        lbltengo.setFont(new Font("Roboto", Font.BOLD, 14));
        lbltengo.setBounds(53, 54, 28, 28);
        panel.add(lbltengo);
        
        lblQuiero = new JLabel("A");
        lblQuiero.setFont(new Font("Roboto", Font.BOLD, 14));
        lblQuiero.setBounds(252, 54, 59, 28);
        panel.add(lblQuiero);
        
        lblflecha = new JLabel("");
        
        ImageIcon imgfle = new ImageIcon(icofle.getImage().getScaledInstance(50, 50, Image.SCALE_SMOOTH));
		lblflecha.setIcon(imgfle);
        lblflecha.setFont(new Font("Roboto", Font.BOLD, 14));
        lblflecha.setBounds(153, 92, 50, 50);
        panel.add(lblflecha);
        
        deDivisaComboBox = new JComboBox();
        deDivisaComboBox.setFont(new Font("Roboto Black", Font.BOLD, 13));
        deDivisaComboBox.setBackground(new Color(204, 255, 153));
        deDivisaComboBox.setModel(new DefaultComboBoxModel(new String[] {"Selecc.  Moneda"}));
        deDivisaComboBox.setBounds(0, 81, 143, 61);
        panel.add(deDivisaComboBox);
        
        lblCalculaadora = new JLabel("CONVERSOR");
        lblCalculaadora.setFont(new Font("Roboto", Font.BOLD, 17));
        lblCalculaadora.setBounds(90, 0, 192, 28);
        panel.add(lblCalculaadora);
        
        aDivisaComboBox = new JComboBox();
        aDivisaComboBox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {
				txtMonto.requestFocus();
			}
		});
        aDivisaComboBox.setFont(new Font("Roboto Black", Font.BOLD, 11));
        aDivisaComboBox.setEnabled(false);
        aDivisaComboBox.setModel(new DefaultComboBoxModel(new String[] {"Guarani"}));
        aDivisaComboBox.setBackground(new Color(255, 51, 51));
        aDivisaComboBox.setBounds(210, 81, 143, 61);
        panel.add(aDivisaComboBox);
        
        lblMontoAConvertir = new JLabel("MONTO A CONVERTIR");
        lblMontoAConvertir.setFont(new Font("Roboto", Font.BOLD, 14));
        lblMontoAConvertir.setBounds(0, 142, 234, 28);
        panel.add(lblMontoAConvertir);
        
        lblNewLabel_1 = new JLabel("Selecciona las monedas y el monto de cotización.");
        lblNewLabel_1.setFont(new Font("Roboto", Font.PLAIN, 12));
        lblNewLabel_1.setBounds(32, 29, 290, 14);
        panel.add(lblNewLabel_1);
        deDivisaComboBox.addMouseListener(new MouseAdapter() {
			
			@Override
			public void mouseClicked(MouseEvent e) {
				deDivisaComboBox.setModel(new DefaultComboBoxModel(
						new String[] {"Dolar", "Guarani","Euro", "Libra Esterlina", "Yen Japones", "Real Brasil"}));
			}
		});
		deDivisaComboBox.addItemListener(new ItemListener() {
			public void itemStateChanged(ItemEvent e) {

				String aDivisa = deDivisaComboBox.getSelectedItem().toString();
				if (aDivisa.equals("Guarani")) {
					aDivisaComboBox.setEnabled(true);
					aDivisaComboBox.requestFocus();
					aDivisaComboBox.setModel(new DefaultComboBoxModel(
							new String[] { "Dolar", "Euro", "Libra Esterlina", "Yen Japones", "Real Brasil" }));

				} else {

					aDivisaComboBox.setModel(new DefaultComboBoxModel(new String[] { "Guarani" }));
					aDivisaComboBox.setEnabled(false);
					txtMonto.requestFocus();

				}

			}
		});
		txtMonto.addKeyListener(new KeyAdapter() {
			public void keyTyped(KeyEvent e) {
				char c = (char) e.getKeyChar();
				if (!Character.isDigit(c) && c != '.') {
					e.consume();

				}
				if (c == '.' && txtMonto.getText().contains(".")) {
					e.consume();
					JOptionPane.showMessageDialog(null, "No se puede agregar dos puntos decimales a un numero");

				}

			}
		});
    }
	private void convertirDivisas() {
		doCompra = new ConvertirDivisas();
		doCompra.convertirMoneda(txtDollarCompra.getText());
		doVenta = new ConvertirDivisas();
		doVenta.convertirMoneda(txtdollarVenta.getText());
		euCompra = new ConvertirDivisas();
		euCompra.convertirMoneda(txteuroCompra.getText());
		euVenta = new ConvertirDivisas();
		euVenta.convertirMoneda(txteuroVenta.getText());
		liCompra = new ConvertirDivisas();
		liCompra.convertirMoneda(txtlibraCompra.getText());
		liVenta = new ConvertirDivisas();
		liVenta.convertirMoneda(txtlibraVenta.getText());
		yeCompra = new ConvertirDivisas();
		yeCompra.convertirMoneda(txtyenCompra.getText());
		yeVenta = new ConvertirDivisas();
		yeVenta.convertirMoneda(txtYenVenta.getText());
		reCompra = new ConvertirDivisas();
		reCompra.convertirMoneda(txtrealCompra.getText());
		reVenta = new ConvertirDivisas();
		reVenta.convertirMoneda(txtrealVenta.getText());
		calcularDivisas();
	}
	private void calcularDivisas() {
		DecimalFormat formatea = new DecimalFormat("###,###.##");
		String aDivisa = aDivisaComboBox.getSelectedItem().toString();
		System.out.println(aDivisa);
		String dDivisa = deDivisaComboBox.getSelectedItem().toString();
		double monto = Double.parseDouble(txtMonto.getText());
		if(dDivisa.equals("Guarani")) {
			switch (aDivisa) {
			case "Dolar":
				doCompra.calcularDivisio(monto, doCompra.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(doCompra.getResultado()) + " $");
				break;
			case "Euro":
				euCompra.calcularDivisio(monto, euCompra.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(euCompra.getResultado()) + " €");
				break;
			case "Libra Esterlina":
				liCompra.calcularDivisio(monto, liCompra.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(liCompra.getResultado()) + " £");
				break;
			case "Yen Japones":
				yeCompra.calcularDivisio(monto, yeCompra.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(yeCompra.getResultado()) + " ¥");
				break;
			case "Real Brasil":
				reCompra.calcularDivisio(monto, reCompra.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(reCompra.getResultado()) + " R$");
			default:
				break;
			}
		}else  {
			switch (dDivisa) {
			case "Dolar":
				doVenta.calcularMultiplicacion(monto, doVenta.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(doVenta.getResultado()) + " ₲");
				
				break;
			case "Euro":
				euVenta.calcularMultiplicacion(monto, euVenta.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(euVenta.getResultado()) + " ₲");
				break;
			case "Libra Esterlina":
				liVenta.calcularMultiplicacion(monto, liVenta.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(liVenta.getResultado()) + " ₲");
				break;
			case "Yen Japones":
				yeVenta.calcularMultiplicacion(monto, yeVenta.obtenerValorMoneda());
				System.out.println(yeVenta.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(yeVenta.getResultado()) + " ₲");
				break;
			case "Real Brasil":
				reVenta.calcularMultiplicacion(monto, reVenta.obtenerValorMoneda());
				txtResultado.setText(""+ formatea.format(reVenta.getResultado()) + " ₲");
			default:
				break;
			}
			
		}
		
	}
	private void limpiar() {
		txtMonto.setText("");
		
		txtResultado.setText("");
		
	}
	public void cargarCampoCotizacionesconJsoup() {
	    String baseUrl = "https://www.cambioschaco.com.py/";
	    cargarCotizacionMonedas(baseUrl);
	    if (dolar.isConectar() && euro.isConectar() && libra.isConectar() && yen.isConectar() && realB.isConectar()) {
	        actualizarCamposCotizaciones(dolar.getCompra(),dolar.getVenta(), euro.getCompra(), euro.getVenta(),
	        		libra.getCompra(), libra.getVenta(), yen.getCompra(), yen.getVenta(), realB.getCompra(), realB.getVenta());
	  
	    } else {
	        int ret = JOptionPane.showOptionDialog(this,
	                "No tienes acceso a internet. Desea recuperar cotizaciones guardadas?", "Pregunta",
	                JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, new Object[]{"si", "no"}, "si");
	        if (ret == JOptionPane.YES_OPTION) {
	            leerArchivoCotizacionesGuardadas();
	            cargarDatosLeidosArchivosCotizaciones();
	        } else {
	            System.exit(0);
	        }
	    }
	}
	private void cargarCotizacionMonedas(String baseUrl) {
	    dolar = new CapturarCotizacionMonedas(baseUrl, "#exchange-usd");
	    euro = new CapturarCotizacionMonedas(baseUrl, "#exchange-eur");
	    libra = new CapturarCotizacionMonedas(baseUrl, "#exchange-gbp");
	    yen = new CapturarCotizacionMonedas(baseUrl, "#exchange-jpy");
	    realB = new CapturarCotizacionMonedas(baseUrl, "#exchange-brl");
	}
	private void actualizarCamposCotizaciones(String dCompra, String dVenta, String eCompra, String eVenta, String lCompra, String lVenta,
			String yCompra, String yVenta, String rCompra, String rVenta) {
	    txtDollarCompra.setText(dCompra);
	    txtdollarVenta.setText(dVenta);
	    txteuroCompra.setText(eCompra);
	    txteuroVenta.setText(eVenta);
	    txtlibraCompra.setText(lCompra);
	    txtlibraVenta.setText(lVenta);
	    txtyenCompra.setText(yCompra);
	    txtYenVenta.setText(yVenta);
	    txtrealCompra.setText(rCompra);
	    txtrealVenta.setText(rVenta);
	}

	private void leerArchivoCotizacionesGuardadas() {
	    String nombreArchivo = "Cotizacionesguardadas.txt";
	    File archivo = new File(nombreArchivo);
	    try (BufferedReader lectorArchivo = new BufferedReader(new FileReader(archivo))) {
	        if (lectorArchivo.ready()) {
	            String cadena;
	            while ((cadena = lectorArchivo.readLine()) != null) {
	                lista = new ArrayList<>(Arrays.asList(cadena.split(",")));
	            }
	        } else {
	            JOptionPane.showMessageDialog(null, "El archivo no está listo para leerse");
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	        JOptionPane.showMessageDialog(null, "Ocurrió un error: " + e.toString());
	    }
	}
	private void cargarDatosLeidosArchivosCotizaciones() {
	
	    try {
	        monedasGuardadas = new MonedasGuardadas(lista.get(0), lista.get(1), lista.get(2), lista.get(3), lista.get(4), lista.get(5),
	                lista.get(6), lista.get(7), lista.get(8), lista.get(9), lista.get(10));
	        actualizarCamposCotizaciones(monedasGuardadas.getDolarCompra(), monedasGuardadas.getDolarVenta(), monedasGuardadas.getEuroCompra(),
	        		monedasGuardadas.getEuroVenta(), monedasGuardadas.getLibraCompra(), monedasGuardadas.getLibraVenta(), monedasGuardadas.getYenCompra(),
	        		monedasGuardadas.getYenVenta(), monedasGuardadas.getRealCompra(), monedasGuardadas.getRealVenta());
	        fechaActualText.setText(monedasGuardadas.getFecha());
	        btnGuardarDatos.setEnabled(false);
	        btnGuardarDatos.setText("Estas es la ultima actualizacion");
	    } catch (Exception e) {
	        JOptionPane.showMessageDialog(null, "No se pudo cargar los campos");
	        e.printStackTrace();
	    }
	}
	
	public void guardarDatosArchivoCotizacion() {
		try {
			File objetoArchivo = new File("Cotizacionesguardadas.txt");
			if(objetoArchivo.createNewFile()) {
				JOptionPane.showMessageDialog(null,"Se ha creado correctamente el archivo: "+  objetoArchivo.getName());
			}
			else {
				agregarRegistrosCotizacion();
				JOptionPane.showMessageDialog(null, "Se cargo con éxito");
			}
			
		} catch (Exception e) {
			System.out.println("Ocurrio un error al crear el archivo");
			
		}
	}
	public void agregarRegistrosCotizacion() {
		try {
			FileWriter cargarDatosenArchivo = new FileWriter("Cotizacionesguardadas.txt",true);
			Fecha fecha = new Fecha();
			
			cargarDatosenArchivo.write(dolar.getCompra());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(dolar.getVenta());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(euro.getCompra());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(euro.getVenta());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(libra.getCompra());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(libra.getVenta());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(yen.getCompra());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(yen.getVenta());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(realB.getCompra());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(realB.getVenta());
			cargarDatosenArchivo.write(",");
			cargarDatosenArchivo.write(fecha.getFecha()+" : "+fecha.getHora());
			cargarDatosenArchivo.write("\n");
			cargarDatosenArchivo.close();
		} catch (Exception e) {
			e.printStackTrace();
			JOptionPane.showMessageDialog(null,"Ocurrio un error al registrar aca" + e.toString());
		}
	}
}
